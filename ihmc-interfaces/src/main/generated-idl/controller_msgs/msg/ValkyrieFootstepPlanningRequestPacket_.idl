#ifndef __controller_msgs__msg__ValkyrieFootstepPlanningRequestPacket__idl__
#define __controller_msgs__msg__ValkyrieFootstepPlanningRequestPacket__idl__

#include "controller_msgs/msg/./PlanarRegionsListMessage_.idl"
#include "controller_msgs/msg/./ValkyrieFootstepPlannerParametersPacket_.idl"
#include "geometry_msgs/msg/./Pose_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {

      @TypeCode(type="controller_msgs::msg::dds_::ValkyrieFootstepPlanningRequestPacket_")
      struct ValkyrieFootstepPlanningRequestPacket
      {
        /**
         * Set this id to keep track of your request
         */
        @defaultValue(value=-1)
        long planner_request_id;
        /**
         * Starting left foot pose
         */
        geometry_msgs::msg::dds::Pose start_left_foot_pose;
        /**
         * Starting right foot pose
         */
        geometry_msgs::msg::dds::Pose start_right_foot_pose;
        /**
         * Goal left foot pose
         */
        geometry_msgs::msg::dds::Pose goal_left_foot_pose;
        /**
         * Goal right foot pose
         */
        geometry_msgs::msg::dds::Pose goal_right_foot_pose;
        /**
         * Intermediate waypoints (optional)
         */
        sequence<geometry_msgs::msg::dds::Pose> waypoints;
        /**
         * Parameters for the planner to use
         */
        controller_msgs::msg::dds::ValkyrieFootstepPlannerParametersPacket parameters;
        /**
         * Acceptable xy distance from the given goal for the planner to terminate
         */
        @defaultValue(value=-1.0)
        double goal_distance_proximity;
        /**
         * Acceptable yaw offset from the given goal for the planner to terminate
         */
        @defaultValue(value=-1.0)
        double goal_yaw_proximity;
        /**
         * Timeout in seconds
         */
        double timeout;
        /**
         * Planar regions to use, if you don't want to assume flat ground
         */
        controller_msgs::msg::dds::PlanarRegionsListMessage planar_regions_list_message;
        /**
         * Explicitly tell the planner to use flat ground
         */
        boolean assume_flat_ground;
        /**
         * If true a body path is computed as part of the planning process. If true, only one goal pose is used
         */
        boolean compute_body_path;
      };
    };
  };
};

#endif
