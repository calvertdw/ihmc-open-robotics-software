#ifndef __controller_msgs__msg__FootstepPlanningRequestPacket__idl__
#define __controller_msgs__msg__FootstepPlanningRequestPacket__idl__

#include "controller_msgs/msg/./PlanarRegionsListMessage_.idl"
#include "geometry_msgs/msg/./Pose_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;

      const octet FOOTSTEP_PLANNER_TYPE_PLAN_THEN_SNAP =
      0;

      /**
       * The recommended planner type
       */
      const octet FOOTSTEP_PLANNER_TYPE_A_STAR =
      1;

      const octet FOOTSTEP_PLANNER_TYPE_VIS_GRAPH_WITH_A_STAR =
      2;

      const long NO_PLAN_ID =
      -1;


      /**
       * This message is part of the IHMC footstep planning module.
       */
      @TypeCode(type="controller_msgs::msg::dds_::FootstepPlanningRequestPacket_")
      struct FootstepPlanningRequestPacket
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Starting left foot pose
         */
        geometry_msgs::msg::dds::Pose start_left_foot_pose;
        /**
         * Starting right foot pose
         */
        geometry_msgs::msg::dds::Pose start_right_foot_pose;
        /**
         * Goal left foot pose
         */
        geometry_msgs::msg::dds::Pose goal_left_foot_pose;
        /**
         * Goal right foot pose
         */
        geometry_msgs::msg::dds::Pose goal_right_foot_pose;
        /**
         * Requested initial stance side. If not specified the planner will choose
         */
        @defaultValue(value=255)
        octet requested_initial_stance_side;
        /**
         * If true, the planner will snap the provided goal steps. Otherwise the provided poses will be trusted as valid footholds.
         */
        @defaultValue(value=True)
        boolean snap_goal_steps;
        /**
         * If snap_goal_steps is true and the goal steps can't be snapped, this specifies whether to abort or go ahead and plan.
         */
        boolean abort_if_goal_step_snapping_fails;
        /**
         * Footstep planner type, see above
         */
        @defaultValue(value=255)
        octet requested_footstep_planner_type;
        /**
         * Acceptable xy distance from the given goal for the planner to terminate
         */
        @defaultValue(value=-1.0)
        double goal_distance_proximity;
        /**
         * Acceptable yaw offset from the given goal for the planner to terminate
         */
        @defaultValue(value=-1.0)
        double goal_yaw_proximity;
        /**
         * Planner timeout in seconds. If max_iterations is set also, the planner terminates whenever either is reached
         */
        @defaultValue(value=5.0)
        double timeout;
        /**
         * Maximum iterations. Set to a non-positive number to disable. If timeout is also set, the planner terminates whener either is reached.
         */
        @defaultValue(value=-1)
        long max_iterations;
        /**
         * Best effort timeout in seconds
         */
        double best_effort_timeout;
        /**
         * Max body path length if using body path
         */
        double horizon_length;
        /**
         * Planar regions to use, if you don't want to assume flat ground
         */
        controller_msgs::msg::dds::PlanarRegionsListMessage planar_regions_list_message;
        /**
         * Explicitly tell the planner to use flat ground
         */
        boolean assume_flat_ground;
        /**
         * Set this id to keep track of your request
         */
        @defaultValue(value=-1)
        long planner_request_id;
        /**
         * Requested body path waypoints. If non-empty, planner will follow this path and will not plan a body path
         */
        sequence<geometry_msgs::msg::dds::Pose, 50> body_path_waypoints;
      };
    };
  };
};

#endif
