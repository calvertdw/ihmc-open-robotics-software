#ifndef __controller_msgs__msg__FootstepPostProcessingParametersPacket__idl__
#define __controller_msgs__msg__FootstepPostProcessingParametersPacket__idl__

module controller_msgs
{
  module msg
  {
    module dds
    {

      /**
       * This message is part of the IHMC footstep planning module.
       */
      @TypeCode(type="controller_msgs::msg::dds_::FootstepPostProcessingParametersPacket_")
      struct FootstepPostProcessingParametersPacket
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Determines whether the post processing module for adjusting the split fractions for the CoP trajectory is enabled.
         */
        @defaultValue(value=True)
        boolean split_fraction_processing_enabled;
        /**
         * Determines whether the post processing module for swinging over planar regions is enabled.
         */
        @defaultValue(value=True)
        boolean swing_over_regions_enabled;
        /**
         * Sets the step down height for determining whether or not the transfer split fractions should be adjusted.
         * If the step height change relative to the stance foot is greater than this value, the split fraction and weight distribution
         * will be adjusted so that the CoM is in a more favorable position, kind of "dropping" onto the swing foot.
         */
        @defaultValue(value=-1.0)
        double step_height_for_large_step_down;
        /**
         * Sets the step down height for the maximum amount of split fraction and weight distribution adjustment.
         * If the step height change relative to the stance foot is greater than this value, the split fraction and weight distribution
         * will be adjusted fully, as returned by {@link #getTransferSplitFractionAtFullDepth()} and {@link #getTransferWeightDistributionAtFullDepth()}.
         */
        @defaultValue(value=-1.0)
        double largest_step_down_height;
        /**
         * Sets the desired transfer split fraction if the robot is stepping down by {@link #getLargestStepDownHeight()}.
         * If the step down height is between {@link #getStepHeightForLargeStepDown()} and {@link #getLargestStepDownHeight()}, the
         * desired split fraction is linearly interpolated between the default value and the value returned by this function.
         */
        @defaultValue(value=-1.0)
        double transfer_split_fraction_at_full_depth;
        /**
         * Sets the desired transfer weight distribution if the robot is stepping down by {@link #getLargestStepDownHeight()}.
         * If the step down height is between {@link #getStepHeightForLargeStepDown()} and {@link #getLargestStepDownHeight()}, the
         * desired weight distribution is linearly interpolated between the default value and the value returned by this function.
         */
        @defaultValue(value=-1.0)
        double transfer_weight_distribution_at_full_depth;
        /**
         * If using the swing over planar regions module, this sets up the minimum swing foot clearance distance between the a ball of radius of the foot length
         * along the swing foot trajectory and the planar regions in the environment.
         */
        @defaultValue(value=-1.0)
        double minimum_swing_foot_clearance;
        /**
         * If using the swing over planar regions module, this is the number of points along the swing foot trajectory that are checked.
         */
        @defaultValue(value=100)
        unsigned long number_of_checks_per_swing;
        /**
         * If using the swing over planar regions module, this is the maximum number of iterations for adjusting the swing foot waypoints to attempt avoiding
         * collisions with the environment.
         */
        @defaultValue(value=50)
        unsigned long maximum_number_of_adjustment_attempts;
        /**
         * If using the swing over planar regions module, this is the maximum adjustment distance of the swing waypoints that will be allowed.
         */
        @defaultValue(value=-1.0)
        double maximum_waypoint_adjustment_distance;
        /**
         * If using the swing over planar regions module, this is the distance that the swing waypoints will be adjusted by.
         */
        @defaultValue(value=-1.0)
        double incremental_waypoint_adjustment_distance;
      };
    };
  };
};

#endif
